import Head from "next/head";
import {
  Button,
  Container,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Spinner,
  Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  VStack,
  useToast,
} from "@chakra-ui/react";
import { useFormik } from "formik";
import {
  useProducts,
  useCreateProduct,
  useDeleteProduct,
  useEditProduct,
} from "@/features/product";

export default function Home() {
  const { data, isLoading: productsIsLoading, refetch } = useProducts();
  const toast = useToast();

  const formik = useFormik({
    initialValues: {
      name: "",
      price: "",
      description: "",
      image: "",
      id: 0,
    },
    onSubmit: () => {
      // console.log("SUBMIT FORM");
      const { name, price, description, image, id } = formik.values;

      if (id) {
        editProduct({
          name,
          price: parseInt(price),
          description,
          image,
          id,
        });
      } else {
        mutate({
          name,
          price: parseInt(price),
          description,
          image,
        });
      }

      formik.setFieldValue("name", "");
      formik.setFieldValue("price", "");
      formik.setFieldValue("description", "");
      formik.setFieldValue("image", "");
      formik.setFieldValue("id", "");
    },
  });

  const { mutate, isLoading: createProductIsLoading } = useCreateProduct({
    onSuccess: () => {
      refetch();

      toast({
        title: "Product added",
        status: "success",
        position: "top-right",
      });
    },
  });

  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetch();

      toast({
        title: "Delete success",
        status: "success",
        position: "top-right",
      });
    },
  });

  const confirmationDelete = (id) => {
    const shouldDelete = confirm("Are you sure?");

    if (shouldDelete) {
      deleteProduct(id);
    }
  };

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  };

  const handleClickEdit = (product) => {
    formik.setFieldValue("id", product.id);
    formik.setFieldValue("name", product.name);
    formik.setFieldValue("price", product.price);
    formik.setFieldValue("description", product.description);
  };

  const { mutate: editProduct } = useEditProduct({
    onSuccess: () => {
      refetch();
      toast({
        title: "Product edited",
        status: "success",
        position: "top-right",
      });
    },
  });

  const renderProducts = () => {
    return data?.data.map((product) => {
      return (
        <Tr key={product.id}>
          <Td>{product.id}</Td>
          <Td>{product.name}</Td>
          <Td>{product.price}</Td>
          <Td>{product.description}</Td>
          <Td display={"flex"} gap={2}>
            <Button
              onClick={() => handleClickEdit(product)}
              colorScheme={"cyan"}
              color={"white"}
            >
              Edit
            </Button>
            <Button
              onClick={() => confirmationDelete(product.id)}
              colorScheme={"red"}
            >
              Delete
            </Button>
          </Td>
        </Tr>
      );
    });
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Heading>Hello World</Heading>

          <Table mb={3}>
            <Thead>
              <Tr>
                <Th>ID</Th>
                <Th>Name</Th>
                <Th>Price</Th>
                <Th>Description</Th>
                <Th>Action</Th>
              </Tr>
            </Thead>
            <Tbody>
              {renderProducts()}
              {productsIsLoading && <Spinner />}
            </Tbody>
          </Table>

          <form onSubmit={formik.handleSubmit}>
            <VStack spacing={3}>
              <FormControl>
                <FormLabel>ID</FormLabel>
                <Input
                  name="id"
                  value={formik.values.id}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Name</FormLabel>
                <Input
                  name="name"
                  value={formik.values.name}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <Input
                  name="price"
                  value={formik.values.price}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input
                  name="description"
                  value={formik.values.description}
                  onChange={handleFormInput}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Image</FormLabel>
                <Input
                  name="image"
                  value={formik.values.image}
                  onChange={handleFormInput}
                />
              </FormControl>
              {createProductIsLoading ? (
                <Spinner />
              ) : (
                <Button type="submit">Submit Product</Button>
              )}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
